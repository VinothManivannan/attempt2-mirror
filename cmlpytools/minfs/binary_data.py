"""
An abstract class that implements conversion to binary and c headers
"""
from builtins import hex
from builtins import object
import abc
from future.utils import with_metaclass

FILE_TEMPLATE = """\
/*
 * This file has been generated by CML build tools.
 */

#ifndef __MINFS_FILE_H__
#define __MINFS_FILE_H__

/***************************************************************************************************
* Macro definitions
***************************************************************************************************/

/* MinFS data */
#define MINFS_FILE {\\
    %%BYTE_ARRAY%% \\
}

#endif /* __MINFS_FILE_H__ */
"""


class BinaryData(with_metaclass(abc.ABCMeta, object)):
    """Class for creating binary and c header files
    """

    def tobin(self, bin_path):
        """Create a binary file

        Args:
            bin_path (str): specifies the path to the output file
        """
        with open(bin_path, "wb") as new_file:
            new_file.write(self.data)

    def tocheader(self, c_path):
        """Create a C header file with the minfs file in hex format

        Args:
            c_path (str): specifies the path to the output file
        """
        hex_array = ""
        i = 0
        for single_byte in self.data:
            if not i % 16 and i != 0:
                hex_array += " \\\n    "
            elif not i % 8 and i != 0:
                hex_array += "  "
            hex_array += '0x' + hex(single_byte).upper()[2:].zfill(2)+","
            i += 1
        file_content = FILE_TEMPLATE.replace("%%BYTE_ARRAY%%", hex_array)
        with open(c_path, "w", encoding="utf-8") as new_file:
            new_file.write(file_content)

    @property
    @abc.abstractmethod
    def data(self):
        """A getter function for the data buffer.
        """
        return
